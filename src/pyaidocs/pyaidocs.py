import logging
logging.basicConfig(level=logging.INFO)
from pyaidocs.options import Options
from pyaidocs.pyaipdfs import pdf_to_text
import pandas as pd
import json

def talk_to_gpt(user, options=Options(), temperature=0.0):
    """
    Sends a user query to a GPT model and returns the response.

    Parameters:
    - user (str): The user input or query to be sent to the GPT model.
    - options (Options): An instance of the Options class, which includes configurations for the GPT model, such as the model name and client.
    - temperature (float): The temperature setting for the model, which controls the randomness of the response. Default is 0.0 for deterministic responses.

    Returns:
    - str: The response generated by the GPT model.
    """
    response = options.client.chat.completions.create(
        model=options.model,
        messages=[{"role": "user", "content": user},
                  {"role": "system", "content": 
    """
    You are a financial assistant specialized in Private Equity. Use \$ instead of $ and \% instead of %.
    """
                   }],
        temperature=temperature,
        seed=42
    )
    return response.choices[0].message.content

def ask_question_pdf(pdf_path, user_question, options=Options(), password=None):
    """
    Extracts text from a PDF and asks a question to the GPT model based on the extracted text.

    Parameters:
    - pdf_path (str): The file path to the PDF document.
    - user_question (str): The question or query to be sent to the GPT model, combined with the extracted text.
    - options (Options): An instance of the Options class, which includes configurations for the GPT model.
    - password (str): Optional password for opening encrypted PDFs.

    Returns:
    - str: The GPT model's response to the user question, informed by the content of the PDF.
    """
    text_pages, tables, message = pdf_to_text(pdf_path, password=password)
    if not text_pages:
        return message
    text = ' '.join(text_pages)
    user = f"{user_question} {text}"
    response = talk_to_gpt(user, options=options, temperature=0.0)
    return response

def is_last_element(tree):
    """
    Determines if a dictionary is the last element in a nested structure.

    Parameters:
    - tree (dict): The dictionary or data structure to check.

    Returns:
    - bool: True if the element is a dictionary and contains no nested dictionaries, False otherwise.
    """
    if isinstance(tree, dict):
        for key, value in tree.items():
            if isinstance(value, dict):
                return False
        return True
    else:
        return True

def traverse_tree(tree, key_before='', result=None):
    """
    Traverses a nested dictionary structure and converts it to a list of data frames or dictionaries.

    Parameters:
    - tree (dict): The nested dictionary to traverse.
    - key_before (str): A string that accumulates keys during traversal.
    - result (list): A list to accumulate the results of the traversal.

    Returns:
    - list: A list containing dictionaries or data frames derived from the nested structure.
    """
    if result is None:
        result = []

    if not is_last_element(tree):
        for key, value in tree.items():
            traverse_tree(value, key_before=key_before + ' ' + key, result=result)
    else:
        table_ = tree
        if isinstance(tree, dict):
            elements = [len(value) for value in tree.values() if isinstance(value, list)]
            if len(elements) > 0:
                max_len = max(elements)
                for key, value in tree.items():
                    if isinstance(value, list) and len(value) < max_len:
                        tree[key] = value + [''] * (max_len - len(value))

            try:
                table_ = pd.DataFrame(tree).T
            except:
                table_ = pd.DataFrame(tree, index=[0])

        result.append({key_before: table_})

    return result

def retrieve_key_variables_text_with_page(pdf_path, key_variables, options=Options(), password=None):
    """
    Extracts specified key variables from a PDF document and identifies the pages where they are found.

    Parameters:
    - pdf_path (str): The file path to the PDF document.
    - key_variables (list): A list of keys to search for in the PDF.
    - options (Options): An instance of the Options class, which includes configurations for the GPT model.
    - password (str): Optional password for opening encrypted PDFs.

    Returns:
    - dict: A dictionary with key variables as keys, and values as dictionaries containing the found values and their respective pages.
    """
    prompt = f""" 
            Identify the following information, return a json string 
            with the exact keys as below.

            {key_variables}       

            Return only a json string with the first character being '{{ and the last character being '}}'.  

            I need to load the string using python's json.loads() function, so make sure the string is in the correct format.   
            """
    text_pages, tables, message = pdf_to_text(pdf_path, password=password)
    key_variables_found = {k: {'values': [], 'pages': []} for k in key_variables}
    
    for page_num, text in enumerate(text_pages):
        user = f"{prompt} {text}"
        response = talk_to_gpt(user, options=options, temperature=0.0)
        response_dict = response.replace('\n', '').replace('\r', '')
        response_dict = json.loads(response_dict)

        for key in key_variables:
            if key in response_dict:
                value = response_dict[key]
                if value not in ['', 'N/A', 'NA', '-']:
                    dict_ = key_variables_found[key]
                    dict_.get('pages').append(page_num + 1)
                    dict_.get('values').append(value)
                    key_variables_found[key] = dict_

    return key_variables_found

def retrieve_key_variables_text(pdf_path, key_variables, options=Options(), password=None):
    """
    Extracts specified key variables from a PDF document using the GPT model.

    Parameters:
    - pdf_path (str): The file path to the PDF document.
    - key_variables (list): A list of keys to search for in the PDF.
    - options (Options): An instance of the Options class, which includes configurations for the GPT model.
    - password (str): Optional password for opening encrypted PDFs.

    Returns:
    - dict: A dictionary containing the extracted key variables and their values.
    """
    prompt = f""" 
            Identify the following information, return a json string 
            with the exact keys as below.

            {key_variables}       

            Return only a json string with the first character being '{{ and the last character being '}}'.  

            I need to load the string using python's json.loads() function, so make sure the string is in the correct format.   
            """
    response = ask_question_pdf(pdf_path, prompt, options=options, password=password)
    response_dict = response.replace('\n', '').replace('\r', '')
    response_dict = json.loads(response_dict)
    return response_dict
